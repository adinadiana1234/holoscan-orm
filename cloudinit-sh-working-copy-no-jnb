#!/bin/bash
echo "running cloudinit.sh script"
echo "BASHRC AS OPC"
sudo -u opc sh -c "echo ${PUB_KEY} >> /home/opc/.ssh/authorized_keys"

echo "INSTALL"
dnf install -y dnf-utils zip unzip gcc
dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
dnf remove -y runc
echo "INSTALL DOCKER"
dnf install -y docker-ce --nobest
echo "ENABLE DOCKER"
systemctl enable docker.service

# Get API key from Terraform variable
api_key="${nvidia_api_key}"

# Function to broadcast and log messages
broadcast() {
  echo "$1"
}

log() {
  echo "$1" >> /var/log/script.log
}

# Install nvidia-container-toolkit for Docker
broadcast "Installing nvidia-container-toolkit for Docker..."
log "Installing nvidia-container-toolkit for Docker..."
distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/nvidia-container-toolkit.repo | sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo >/dev/null
sudo yum install -y nvidia-container-toolkit >/dev/null
sudo systemctl restart docker
broadcast "nvidia-container-toolkit installed successfully."
log "nvidia-container-toolkit installed successfully."

# Generate CDI configuration for Docker
broadcast "Configuring CDI to use with Docker..."
log "Configuring CDI to use with Docker..."
sudo nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml >/dev/null
broadcast "CDI configured successfully for Docker."
log "CDI configured successfully for Docker."

# Setup nvidia driver to be persistent across reboots
broadcast "Running nvidia-persistented..."
log "Running nvidia-persistented..."
nvidia-persistenced # this will make /dev/nvidia0
sudo systemctl enable nvidia-persistenced
broadcast "nvidia-persistented running and enabled."
log "nvidia-persistented running and enabled."

# Ensure Docker uses the NVIDIA runtime
broadcast "Configuring Docker to use NVIDIA runtime..."
log "Configuring Docker to use NVIDIA runtime..."
sudo tee /etc/docker/daemon.json > /dev/null <<EOF
{
    "runtimes": {
        "nvidia": {
            "path": "nvidia-container-runtime",
            "runtimeArgs": []
        }
    }
}
EOF
sudo systemctl restart docker
broadcast "Docker configured to use NVIDIA runtime."
log "Docker configured to use NVIDIA runtime."

echo "START DOCKER"
systemctl start docker.service
usermod -a -G docker opc

echo "PYTHON packages"
python3 -m pip install --upgrade pip wheel oci
python3 -m pip install --upgrade setuptools
python3 -m pip install oci-cli
python3 -m pip install langchain
python3 -m pip install six

echo "GROWFS"
/usr/libexec/oci-growfs -y

# # Open port 8888 on the firewall
# # broadcast "Opening port 8888 on firewall..."
# # log "Opening port 8888 on firewall..."
# echo "1"
# sudo firewall-cmd --zone=public --add-port=8888/tcp --permanent
# # broadcast "Port 8888 added to firewall successfully."
# # log "Port 8888 added to firewall successfully."

# # Reload the firewall to apply changes
# # broadcast "Reloading firewall to apply changes..."
# # log "Reloading firewall to apply changes..."
# echo "2"
# sudo firewall-cmd --reload
# # broadcast "Firewall reloaded successfully."
# # log "Firewall reloaded successfully."

# # Verify port 8888 is open
# # broadcast "Verifying that port 8888 is open..."
# # log "Verifying that port 8888 is open..."
# # if sudo firewall-cmd --zone=public --query-port=8888/tcp; then
# #   broadcast "Port 8888 is open."
# #   log "Port 8888 is open."
# # else
# #   broadcast "Failed to open port 8888."
# #   log "Failed to open port 8888."
# # fi

echo "Holoscan install"

# Login to nvcr.io using Docker
broadcast "Logging in to nvcr.io..."
log "Logging in to nvcr.io..."
echo "Logging in to nvcr.io..."
echo $api_key | docker login nvcr.io --username '$oauthtoken' --password-stdin >/dev/null
broadcast "Logged in to nvcr.io successfully."
log "Logged in to nvcr.io successfully."

# Pull Holoscan from nvcr.io using Docker
broadcast "Pulling Holoscan from nvcr.io. This may take a while..."
log "Pulling Holoscan from nvcr.io..."
docker pull nvcr.io/nvidia/clara-holoscan/holoscan:v2.4.0-dgpu >/dev/null
broadcast "Holoscan pulled successfully."
log "Holoscan pulled successfully."

# Run Holoscan Jupyter container
broadcast "Starting Holoscan Jupyter container..."
log "Starting Holoscan Jupyter container..."

docker run -d \
  --gpus all \
  --net host \
  --ipc=host \
  --cap-add=CAP_SYS_PTRACE \
  --ulimit memlock=-1 \
  --ulimit stack=67108864 \
  -v /home/user/holoscan_examples:/examples \
  -v /var/run/docker.sock:/var/run/docker.sock \
  --name holoscan_jupyter \
  nvcr.io/nvidia/clara-holoscan/holoscan:v2.4.0-dgpu /bin/bash -c \
  "apt-get update && apt-get install -y python3-pip && pip3 install jupyter && \
  jupyter notebook --ip=0.0.0.0 --port=8888 --allow-root --no-browser --NotebookApp.token='' --NotebookApp.password=''"

broadcast "Holoscan Jupyter container started successfully."
log "Holoscan Jupyter container started successfully."

echo "FIREWALL"
systemctl stop firewalld
firewall-offline-cmd --zone=public --add-port=8888/tcp
systemctl start firewalld